/*
 * Copyright (c) 2011, All Rights Reserved.
 */

/**
 * ClassName: AppAction
 * Function: App的action
 *
 * @author   <a href="mailto:lichunping@baidu.com">lichunping</a>
 * @version  
 * @since    TODO
 * @Date     2011-9-27 下午07:42:45
 *
 * @see      
 */

package com.baidu.webos.action.app;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.baidu.webos.action.user.UserAction;
import com.baidu.webos.basic.action.CRUDActionSupport;
import com.baidu.webos.basic.utils.LoggerUtils;
import com.baidu.webos.entity.app.App;
import com.baidu.webos.entity.cons.AppSort;
import com.baidu.webos.service.app.AppService;

public class AppAction extends CRUDActionSupport<App> {
    
    private static final long serialVersionUID = 1L;
    
    @Resource
    private UserAction userAction;
    
    @Resource
    private AppService appService;
    private App app;
    
//    private Integer userId;
    
    protected static  Logger logger = LoggerFactory.getLogger(AppAction.class);

    private String category;
    private Integer appId;    
    private List<App> appList;
    private List<AppSort> appSortList;

    public AppAction() {

    }
    
    /**
     * 后续通过session获取用户登录信息
     * 临时方案采用从UserAction中获取
     */
    @Override
    public Integer getUserId() {
        return userAction.getUserId();
    }

    public void setUserId(Integer userId) {
        userAction.setUserId(userId);        
    }   

    @Override
    public String execute() {
        try {
            // 查询的是单独app
            if (appId != null) {
                if (getUserId() != null) {
                    app = appService.getByAppIdAndUser(appId, getUserId());
                } else {
                    app = appService.getByAppId(appId);
                }
                return SUCCESS;
            }
            // 按照类别查询app列表
            if (!StringUtils.isBlank(category)) {
                appList = appService.getAppListByCategoryAndUser(category, getUserId());                
                return "category";
            }
        } catch (Exception e) {
            LoggerUtils.info(logger, "get app: " + appId + " failed", e);
        }

        return SUCCESS;
    }
    
    /**
     * 模板列表页分页查询
     * @throws Exception 
     */
    @Override
    public String list() throws Exception {
        appList = appService.getAppListByUser(getUserId());
        return "list";
    }
    
    /**
     * 新建模板
     * @throws Exception 
     */
    @Override
    public String save() throws Exception {
        return "saveOrUpdate";
    }    
    
    /**
     * 修改模板
     * @throws Exception 
     */
    @Override
    public String modify() throws Exception {
        return "saveOrUpdate";
    }
    
    /**
     * 准备实体数据
     * @throws Exception 
     */
    @Override
    protected void prepareModel() throws Exception {
        this.app = new App();
    }
    
    /**
     * 返回实体
     * @see com.opensymphony.xwork2.ModelDriven#getModel()
     */
    @Override
    public App getModel() {
        return app;
    }
    
   //

    /**
     * latest:
     * action入口，返回最新的app列表
     * @return 指向struts result
     * @author lichunping    
     * @since 1.0.0
     */
    public String latest() throws Exception {
        appList = appService.getAppListByLatest();
        return "latest";
    }

    /**
     * hot:
     * action入口，返回最流行的app列表
     * @return 指向struts result
     * @author lichunping    
     * @since 1.0.0
     */
    public String hot() throws Exception {
        appList = appService.getAppListByHot();
        return "hot";
    }

    /**
     * hot:
     * action入口，返回按分类查询的app列表
     * @return 指向struts result
     * @author lichunping    
     * @since 1.0.0
     */
    public String sort() throws Exception {
        return "sort";
    }    

    public App getApp() {
        return app;
    }

    public void setApp(App app) {
        this.app = app;
    }

    public Integer getAppId() {
        return appId;
    }

    public void setAppId(Integer appId) {
        this.appId = appId;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public List<App> getAppList() {
        return appList;
    }

    public void setAppList(List<App> appList) {
        this.appList = appList;
    }

    public List<AppSort> getAppSortList() {
        try {
            return appService.getAppSortList();
        } catch (Exception e) {
            return appSortList;
        }
    }

    public void setAppSortList(List<AppSort> appSortList) {
        this.appSortList = appSortList;
    }
    
}