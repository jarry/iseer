/*
 * Copyright (c) 2011, All Rights Reserved.
 */

package com.baidu.webos.dao.impl.app;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

//import org.hibernate.Query;
//import org.hibernate.Session;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.baidu.webos.basic.dao.impl.GenericDaoImpl;
import com.baidu.webos.dao.app.AppDao;
import com.baidu.webos.entity.app.App;

/**
 * ClassName: AppDaoImpl
 * Description: app dao层
 * 
 * @author   <a href="mailto:lichunpin@baidu.com">LiChunping</a>
 * @version  
 * @since    1.0.0
 * @Date     2011-9-27 下午02:02:17
 *
 * @see      
 */
@Repository
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class AppDaoImpl extends GenericDaoImpl<App, Integer> implements AppDao {
    
    /**
     * 构造方法，执行通用Dao
     * 并且给实体class赋值
     */
    public AppDaoImpl() {
        super();
        this.entityClass = App.class;
    }
    
    /**
     * get:
     * 根据app id记录获取app对象
     * @param appId
     * @return app对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public App get(Integer appId) {
//        if (appId == null) {
//            return null; 
//        } 
//        return super.get(appId);
//    }
    
    /**
     * getAppById:
     * 根据appId获取app对象
     * @param appId
     * @return app对象
     * @author lichunping    
     * @since 1.0.0
     */
    public App getByAppId(Integer appId) {
        if (appId == null) {
            return null;
        }
        
        String hql = "FROM App a WHERE a.appId=? ";
        return (App) super.findUnique(hql, appId);
        
//        Query query = super.createQuery(hql);   
//        query.setParameter(0, appId);
//        return (App) query.uniqueResult();

    }
    
    /**
     * save:
     * 根据app对象插入新app
     * @param app
     * @author lichunping
     * @return 保存后的新id 
     * @since 1.0.0
     */
//    public Integer save(App app) {
//        if (app == null) {
//            return 0;
//        }        
//        return super.save(app);
//    }
    
    /**
     * saveOrUpdate:
     * 根据app对象插入或更新app
     * @param app
     * @author lichunping    
     * @since 1.0.0
     */
//    public void saveOrUpdate(App app) {
//        if (app != null) {
//            super.saveOrUpdate(app);
//        }
//    }
    
    /**
     * batchUpdateOrDelete:
     * 根据app对象插入或更新app
     * @param hql hql语句
     * @param parameterMap 参数对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public int batchUpdateOrDelete(String hql, Map<String, Object> parameterMap) {
//        if (!StringUtils.isBlank(hql) && parameterMap != null) {
//            return 0;   
//        }
//        return super.batchUpdateOrDelete(hql, parameterMap);
//    }
    
    /**
     * batchUpdateOrDeleteBySql:
     * 根据app对象插入或更新app
     * @param sql hql语句
     * @param parameterMap 参数对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public int batchUpdateOrDeleteBySql(String sql, Map<String, Object> parameterMap) {
//        if (!StringUtils.isBlank(sql) && parameterMap != null) {
//            return 0;
//        }
//        return super.batchUpdateOrDeleteBySql(sql, parameterMap);
//    } 
    
    /**
     * delete:
     * 根据app对象删除该app
     * @author lichunping    
     * @since 1.0.0
     */
//    public void delete(App app) {
//        if (app != null) {
//            super.delete(app);
//        }
//    }
    
    /**
     * deleteByAppId:
     * 根据appId删除该app
     * @author lichunping    
     * @since 1.0.0
     */
    public int deleteByAppId(Integer appId) {
        if (appId == null) {
            return 0;
        }

        String hql = "DELETE FROM App a WHERE a.appId = :appId ";
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("appId", appId);
        
        return super.batchUpdateOrDelete(hql, paramMap);
    }
    
    /**
     * getByName:
     * 根据名称获取app列表信息
     * @param name
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    @SuppressWarnings("unchecked")
    public List<App> getByName(String name) {
        if (name == null) {
            return null;
        }
        String hql = "FROM App a WHERE a.name=? ";
        return super.find(hql, name);
//        Query q = super.createQuery(hql);
//        q.setParameter("name", name);
//        return q.list();

    }
    
    /**
     * getAppList:
     * 查询全部app列表
     * TODO// 待处理分页情况
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getAppList() {
        return super.findAll();
    } 
    
    /**
     * getAppList:
     * 根据category名称获取app列表信息
     * TODO// 待处理分页情况
     * @param category
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    @SuppressWarnings("unchecked")
    public List<App> getAppList(Integer categoryId) {
        if (categoryId == null) {
            return null;
        }
        String hql = "FROM App a WHERE a.categoryId=? ";
        return super.find(hql, categoryId);
   } 
    
    /**
     * getAppListByHot:
     * 获取最热app对象列表信息 
     * TODO// 待处理分页情况
     * @param sort
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    @SuppressWarnings("unchecked")
    public List<App> getAppListByHot() throws Exception {
        String  sql = "SELECT a.*, COUNT(s.SYSTEM_ID) AS INSTALLED_NUM "
                      + "FROM `system_app` s join `apps` a on s.APP_ID = a.APP_ID GROUP BY a.`APP_ID`"
                      + "ORDER BY INSTALLED_NUM DESC ";
        return super.findBySQL(sql, null, App.class);
        
//        String  sql = "SELECT a.* "
//            + "FROM `system_app` s join `apps` a on s.APP_ID = a.APP_ID GROUP BY a.`APP_ID`"
//            + "ORDER BY COUNT(s.SYSTEM_ID) DESC ";
//      Session session = super.getSession();
//      Query q = (Query) session.createSQLQuery(sql).addEntity(App.class);
//      return q.list();
    }
    
    
    /**
     * getAppListByLatest:
     * 获取最近app对象列表信息
     * TODO// 待处理分页情况
     * @param sort
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    @SuppressWarnings("unchecked")
    public List<App> getAppListByLatest() throws Exception {
        String  hql = "FROM App a ORDER BY a.releaseTime DESC";
        return super.find(hql);
    }
    
    
    /**
     * installed:
     * 根据systemId与appId判断该app是否已经安装了，通过sql查询关联表
     * @param systemId
     * @param appId
     * @return true | false
     * @author lichunping    
     * @since 1.0.0
     */
    public boolean isInstalled(Integer systemId, Integer appId) {
        String sql = "SELECT * FROM `system_app` WHERE `SYSTEM_ID` = :systemId AND `APP_ID` = :appId";
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("systemId", systemId);
        paramMap.put("appId", appId);
        return super.findBySQL(sql, paramMap).size() > 0;
    }
    
    
}
