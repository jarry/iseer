/*
 * Copyright (c) 2011, All Rights Reserved.
 */

package com.baidu.webos.dao.app;

import java.util.List;
import com.baidu.webos.basic.dao.GenericDao;
import com.baidu.webos.entity.app.App;

/**
 * ClassName: AppDao
 * Description: app dao层对外接口
 * 
 * @author   <a href="mailto:lichunpin@baidu.com">LiChunping</a>
 * @version  
 * @since    TODO
 * @Date     2011-9-27 下午01:56:59
 *
 * @see      
 */

public interface AppDao extends GenericDao<App,Integer> {  
//public interface AppDao {

    /**
     * get:
     * 根据app id记录获取app对象
     * @param appId
     * @return app对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public App get(Integer appId);
    
    
    /**
     * getAppById:
     * 根据appId获取app对象
     * @param appId
     * @return app对象
     * @author lichunping    
     * @since 1.0.0
     */
    public App getByAppId(Integer appId);
    
    /**
     * save:
     * 根据app对象插入新app
     * @param app
     * @author lichunping
     * @return 保存后的新id 
     * @since 1.0.0
     */
//    public Integer save(App app);
    
    /**
     * saveOrUpdate:
     * 根据app对象插入或更新app
     * @param app
     * @author lichunping    
     * @since 1.0.0
     */
//    public void saveOrUpdate(App app);
    
    
    /**
     * batchUpdateOrDelete:
     * 根据app对象插入或更新app
     * @param hql hql语句
     * @param parameterMap 参数对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public int batchUpdateOrDelete(String hql, Map<String, Object> parameterMap);
    
    
    /**
     * batchUpdateOrDeleteBySql:
     * 根据app对象插入或更新app
     * @param sql hql语句
     * @param parameterMap 参数对象
     * @author lichunping    
     * @since 1.0.0
     */
//    public int batchUpdateOrDeleteBySql(String sql, Map<String, Object> parameterMap);

    /**
     * delete:
     * 根据app对象删除该app
     * @author lichunping    
     * @since 1.0.0
     */
//    public void delete(App app);
    
    /**
     * deleteByAppId:
     * 根据appId删除该app
     * @author lichunping    
     * @since 1.0.0
     */
    public int deleteByAppId(Integer appId);
    
    /**
     * getByName:
     * 根据名称获取app列表信息
     * @param name
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getByName(String name);
    
    /**
     * getAppList:
     * 查询全部app列表
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getAppList();
    
    /**
     * getAppList:
     * 根据类别ID获取app列表信息
     * @param categoryId
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getAppList(Integer categoryId);
    
    
    /**
     * getAppListByHot:
     * 获取最热app对象列表信息
     * @param sort
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getAppListByHot() throws Exception;
    
    
    /**
     * getAppListByLatest:
     * 获取最近app对象列表信息
     * @param sort
     * @return app列表
     * @author lichunping    
     * @since 1.0.0
     */
    public List<App> getAppListByLatest() throws Exception;
    
    
    /**
     * installed:
     * 根据systemId与appId判断该app是否已经安装了，通过sql查询关联表
     * @param systemId
     * @param appId
     * @return true | false
     * @author lichunping    
     * @since 1.0.0
     */
    public boolean isInstalled(Integer systemId, Integer appId);
    
}
